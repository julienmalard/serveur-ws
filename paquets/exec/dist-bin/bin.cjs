#!/usr/bin/env node
"use strict";var p=Object.create;var u=Object.defineProperty;var m=Object.getOwnPropertyDescriptor;var f=Object.getOwnPropertyNames;var y=Object.getPrototypeOf,w=Object.prototype.hasOwnProperty;var h=(e,t,s,r)=>{if(t&&typeof t=="object"||typeof t=="function")for(let o of f(t))!w.call(e,o)&&o!==s&&u(e,o,{get:()=>t[o],enumerable:!(r=m(t,o))||r.enumerable});return e};var i=(e,t,s)=>(s=e!=null?p(y(e)):{},h(t||!e||!e.__esModule?u(s,"default",{value:e,enumerable:!0}):s,e));const g=require("yargs"),b=require("yargs/helpers"),N=require("url");var d=typeof document<"u"?document.currentScript:null;const R=import("ora"),a=import("chalk"),L=import("@constl/serveur");N.fileURLToPath(new URL("..",typeof document>"u"?require("url").pathToFileURL(__filename).href:d&&d.src||new URL("bin.cjs",document.baseURI).href));const n=async({message:e})=>{console.log("PRÉFIX_MACHINE"+JSON.stringify(e))};g(b.hideBin(process.argv)).usage("Utilisation: $0 <commande> [options]").command(["lancer [-m] [--port <port>] [--dossier <dossier>]"],"Lancer le serveur",e=>e.option("port",{alias:"p",describe:"Le numéro du port de connexion.",type:"string"}).option("sujet",{alias:"s",describe:"Configurer un canal d'écoute personnalisé pour le réseau.",type:"string"}).option("dossier",{alias:"d",describe:"Le dossier du compte Constellation.",type:"string"}).option("machine",{alias:"m",describe:"Mode communication machine.",type:"boolean"}),async e=>{let t;e.machine?await n({message:{type:"LANÇAGE NŒUD"}}):t=(await R).default((await a).default.yellow("Initialisation du nœud).start()"));const s={dossier:e.dossier,sujetRéseau:e.sujet},{lancerServeur:r}=await L,{port:o,codeSecret:c,fermerServeur:l}=await r({port:e.port?Number.parseInt(e.port):void 0,optsConstellation:s});process.stdin.on("data",async()=>{e.machine?await n({message:{type:"ON FERME"}}):t?.start((await a).default.yellow("On ferme le nœud..."));try{l()}finally{e.machine?await n({message:{type:"NŒUD FERMÉ"}}):t?.succeed((await a).default.yellow("Nœud fermé.")),process.exit(0)}}),e.machine?await n({message:{type:"NŒUD PRÊT",port:o,codeSecret:c}}):t.succeed((await a).default.yellow(`Nœud local prêt sur port : ${o}
Code secret : ${c}
Frappez « retour » pour arrêter le nœud.`))}).command(["version"],"La version du serveur",e=>e,async()=>{console.log("packageJson.version")}).demandCommand().help("aide","Obtenir de l'aide").alias("aide","a").epilog("Code source et rapportage d'erreurs: https://github.com/reseau-constellation/serveur-ws").parse();
